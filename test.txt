import pandas as pd
import re
from collections import Counter

# Function to read CSV, process all data and count word frequencies
def word_frequencies_from_csv(file_path):
    # Step 1: Load the CSV file
    df = pd.read_csv(file_path)
    
    # Step 2: Combine all data from the CSV file into one large string
    # Convert everything in the dataframe to a single string and join with spaces
    full_text = ' '.join(df.astype(str).values.flatten())
    
    # Step 3: Clean and tokenize the text
    # Convert to lowercase, remove non-alphabetic characters (you can modify this for better handling of punctuation, etc.)
    words = re.findall(r'\b\w+\b', full_text.lower())
    
    # Step 4: Count word frequencies using Counter
    word_counts = Counter(words)
    
    # Step 5: Create a DataFrame from the word counts
    word_freq_df = pd.DataFrame(word_counts.items(), columns=['Word', 'Frequency'])
    
    # Sort by frequency in descending order
    word_freq_df = word_freq_df.sort_values(by='Frequency', ascending=False).reset_index(drop=True)
    
    return word_freq_df

# Example usage
file_path = 'TheGiftOfMagi.csv'  # Path to your CSV file
word_freq_df = word_frequencies_from_csv(file_path)

# Display the word frequencies
print(word_freq_df)

------------------------------------------------------------------------

import pymongo
import sqlite3

def transfer_movies_data(mongo_uri, database_name, collection_name, sqlite_db_path):
    try:
        # Connect to MongoDB
        mongo_client = pymongo.MongoClient(mongo_uri)
        mongo_db = mongo_client[database_name]
        mongo_collection = mongo_db[collection_name]

        print("Connected to MongoDB successfully.")
    except Exception as e:
        print(f"Error connecting to MongoDB: {e}")
        return

    try:
        # Connect to SQLite
        sqlite_conn = sqlite3.connect(sqlite_db_path)
        sqlite_cursor = sqlite_conn.cursor()

        # Create a table in SQLite if it doesn't exist
        create_table_query = """
        CREATE TABLE IF NOT EXISTS movies (
            id TEXT PRIMARY KEY,
            title TEXT,
            director TEXT,
            release_year INTEGER,
            genre TEXT
        );
        """
        sqlite_cursor.execute(create_table_query)
        sqlite_conn.commit()

        print("Connected to SQLite and ensured table exists.")
    except sqlite3.Error as e:
        print(f"Error connecting to SQLite: {e}")
        mongo_client.close()
        return

    try:
        # Fetch data from MongoDB
        movies_data = mongo_collection.find()

        # Insert data into SQLite
        for movie in movies_data:
            # Extract data from MongoDB document
            movie_id = str(movie.get("_id", ""))
            title = movie.get("title", "Unknown")
            director = movie.get("director", "Unknown")
            release_year = movie.get("release_year", 0)
            genre = movie.get("genre", "Unknown")

            # Insert into SQLite
            insert_query = """
            INSERT OR REPLACE INTO movies (id, title, director, release_year, genre)
            VALUES (?, ?, ?, ?, ?);
            """
            sqlite_cursor.execute(insert_query, (movie_id, title, director, release_year, genre))
        
        sqlite_conn.commit()
        print("Data transfer completed successfully!")
    except Exception as e:
        print(f"Error during data transfer: {e}")
    finally:
        # Close connections
        try:
            sqlite_conn.close()
            print("SQLite connection closed.")
        except Exception as e:
            print(f"Error closing SQLite connection: {e}")

        try:
            mongo_client.close()
            print("MongoDB connection closed.")
        except Exception as e:
            print(f"Error closing MongoDB connection: {e}")

# Configuration
MONGO_URI = "your_mongodb_connection_string"  # Replace with your MongoDB URI
DATABASE_NAME = "movie_library"               # Replace with your database name
COLLECTION_NAME = "movies"                    # Replace with your collection name
SQLITE_DB_PATH = "movies.db"                  # Path for the SQLite database file

# Run the transfer
transfer_movies_data(MONGO_URI, DATABASE_NAME, COLLECTION_NAME, SQLITE_DB_PATH)








import pandas as pd        #importing pandas
file_path='TheGiftOfMagi.csv'     #defining filepath

#creating function to get word count
def  fn_Counter(filepath):
    file =open(filepath,'r',encoding='UTF-8')           #read the specified csv file
    dict_Uniquewords={}                                 #inililizing dictionay to store unique words and counts
    for line in file:                                   #looping through each files
        if line.strip()!="":                            #Checking for not empty lines                 
            line=line.strip()                           #removing spaces 
            list_Lines=line.split()                     #spliting sentences to words based on space character
            for item in list_Lines:                     #looping through each items/words in line
                if(item not in dict_Uniquewords):
                    dict_Uniquewords[item]=1            #if new word then adding to dictionary
                else:
                    dict_Uniquewords[item]+=1           #if already existing word incrementing count
    file.close()
    return dict_Uniquewords

#function call
dictUniqueWordCount =fn_Counter(file_path)

#creation of dataframe and defining columns
df=pd.DataFrame(list(dictUniqueWordCount.items()),columns=['Words', 'Count'])
print(df) 



"mongodb+srv://rohithrajreganti:rohithrajreganti@cluster0.rd7dn.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
https://ctxt.io/2/AAB4_AbNFQ


from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

uri=r"mongodb+srv://rohithrajreganti:rohithrajreganti@cluster0.rd7dn.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

#create a new client and connect to the server
client=MongoClient(uri,server_api=ServerApi('1'),tlsAllowInvalidCertificates=True)

#send a ping to confirm the successful connection

try:
    client.admin.command('ping')
    print('pinged ur deployment, u r successfully connected')
except Exception as e:
    print(e)



python -m pip install "pymongo[srv]"



from pymongo import Mongoclient
import pandas as pd
connection_string = "mongodb+srv://rohithrajreganti: rohithrajreganti@clustere.rd7dn.mongodb.net/?retrywrites=true&w=majority&appName=Clustero"
try:
client = MongoClient (connection_string, tlsAllowInvalidCertificates=True)
print("connected to mongo atlas success")
# connect tow mongo cluster
db = client['sample_mflix']
# access a collection
collection = db['movies']
#Query the collection
results collection.find().limit(5)
# for doc in results:
# print(doc)
#
break
except Exception as e:
print(e)
finally:
client.close()
#print(type (results))
result_list = list(results) # print(type (result_list)) # print(result_list[:4])
df =
pd.DataFrame(result_list)
print(df.head()) print(df.columns)
1
You have Windows Subsystem
your system. Do you want to i entanciano festivate W



-----------------------------------------

from pymongo import MongoClient
import pandas as pd
from bson.objectid import ObjectId


connection_string=r"mongodb+srv://rohithrajreganti:rohithrajreganti@cluster0.rd7dn.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

try:
    client=MongoClient(connection_string,tlsAllowInvalidCertificates=True)
    print("connected to mongo atlassuccess")

    #connect to mongo cluster

    db=client['ust_live_quiz']

    #access a collection

    collection=db["basic_collection_test"]

    docid="673835d6211261f70d407516"
    query = {"_id":ObjectId(docid)}
    update={"$set":{"name":"Sam Thomas","age":27,"city":"Kottayam" ,"Best Season":["Winter","Spring"]}}
    result=collection.update_one(query,update)
    
    results=collection.find()

    if(result.matched_count>0):
        print("there was a match, document has been found")


except Exception as e:
    print(e)


result_list=list(results)

df=pd.DataFrame(result_list)
print(df.head(20))
#print(df.columns)

client.close()


--------------------------------------------------------------

import pymongo
import sqlite3

def transfer_movies_data(mongo_uri, database_name, collection_name, sqlite_db_path):
    try:
        # Connect to MongoDB
        mongo_client = pymongo.MongoClient(mongo_uri)
        mongo_db = mongo_client[database_name]
        mongo_collection = mongo_db[collection_name]

        print("Connected to MongoDB successfully.")
    except Exception as e:
        print(f"Error connecting to MongoDB: {e}")
        return

    try:
        # Connect to SQLite
        sqlite_conn = sqlite3.connect(sqlite_db_path)
        sqlite_cursor = sqlite_conn.cursor()

        # Create a table in SQLite if it doesn't exist
        create_table_query = """
        CREATE TABLE IF NOT EXISTS movies (
            id TEXT PRIMARY KEY,
            title TEXT,
            director TEXT,
            release_year INTEGER,
            genre TEXT
        );
        """
        sqlite_cursor.execute(create_table_query)
        sqlite_conn.commit()

        print("Connected to SQLite and ensured table exists.")
    except sqlite3.Error as e:
        print(f"Error connecting to SQLite: {e}")
        mongo_client.close()
        return

    try:
        # Fetch data from MongoDB
        movies_data = mongo_collection.find()

        # Insert data into SQLite
        for movie in movies_data:
            # Extract data from MongoDB document
            movie_id = str(movie.get("_id", ""))
            title = movie.get("title", "Unknown")
            director = movie.get("director", "Unknown")
            release_year = movie.get("release_year", 0)
            genre = movie.get("genre", "Unknown")

            # Insert into SQLite
            insert_query = """
            INSERT OR REPLACE INTO movies (id, title, director, release_year, genre)
            VALUES (?, ?, ?, ?, ?);
            """
            sqlite_cursor.execute(insert_query, (movie_id, title, director, release_year, genre))
        
        sqlite_conn.commit()
        print("Data transfer completed successfully!")
    except Exception as e:
        print(f"Error during data transfer: {e}")
    finally:
        # Close connections
        try:
            sqlite_conn.close()
            print("SQLite connection closed.")
        except Exception as e:
            print(f"Error closing SQLite connection: {e}")

        try:
            mongo_client.close()
            print("MongoDB connection closed.")
        except Exception as e:
            print(f"Error closing MongoDB connection: {e}")

# Configuration
MONGO_URI = "your_mongodb_connection_string"  # Replace with your MongoDB URI
DATABASE_NAME = "movie_library"               # Replace with your database name
COLLECTION_NAME = "movies"                    # Replace with your collection name
SQLITE_DB_PATH = "movies.db"                  # Path for the SQLite database file

# Run the transfer
transfer_movies_data(MONGO_URI, DATABASE_NAME, COLLECTION_NAME, SQLITE_DB_PATH)


